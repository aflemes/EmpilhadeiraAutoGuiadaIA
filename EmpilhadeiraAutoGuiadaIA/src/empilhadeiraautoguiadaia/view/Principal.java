package empilhadeiraautoguiadaia.view;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.Color;
import javax.swing.JPanel;
import empilhadeiraautoguiadaia.controller.InteligenciaController;
import empilhadeiraautoguiadaia.model.Populacao;
import empilhadeiraautoguiadaia.model.Coordenadas;
import java.awt.Component;
import java.awt.Container;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JRootPane;

/**
 *
 * @author skyli
 */
public class Principal extends javax.swing.JFrame {
    /**
     * @param args the command line arguments
     */
    private String mapa[][] = {{"NO","NS" ,"NS" ,"NS" ,"NL" ,"NO","NS" ,"NS" ,"NL" ,"NO","X"},
                               {"OL","ONS","NS" ,"NS" ,"SL" ,"OL","ON" ,"NL" ,"OS" ,"SL",""},
                               {"O ","NS" ,"NS" ,"NS" ,"NS" ,"L ","OSL","O"  ,"NS" ,"NL",""},
                               {"OS","NS" ,"NS" ,"NL" ,"ONS","S" ,"NS" ,"SL" ,"ONL","OL",""},
                               {"ON","NSL","ON" ,"L"  ,"ON" ,"NS","NS" ,"NS" ,"SL" ,"SO","X"},
                               {"OS","NS" ,"L"  ,"O"  ,"S"  ,"NS","NS" ,"NS" ,"NS" ,"NL",""},
                               {"ON","NS" ,"SL" ,"OL" ,"ONS","N" ,"NL" ,"NO" ,"NS" ,"L" ,""},
                               {"O" ,"N"  ,"NS" ,"S"  ,"N"  ,"L" ,"OL" ,"OS" ,"NS" ,"NL",""},
                               {"OL","OL" ,"ONS","NSL","OL" ,"OL","OS" ,"NS" ,"NS" ,"L" ,""},
                               {"SL","OS" ,"NS" ,"NS" ,"SL" ,"OS","NS" ,"NS" ,"NS" ,"SL",""}};
    
    private int taxaMutacao;
    private int taxaPopulacao;
    private int taxaCrossover;
    private int numeroGenes;
    private int numMaximoTentativas;
    private boolean elitismo;
    private boolean encontrouSolucao;
    private int melhorSolucao;
    private int melhorAptidao = 9999;
    private ArrayList<String> direcao;
    /**
     * Creates new form Principal
     */
    
    public Principal() {
        initComponents();
        initTela();
        initLabirinto();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblPopulacao = new javax.swing.JLabel();
        lblCrossOver = new javax.swing.JLabel();
        lblMutacao = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jlblFitness = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jlblFitnessEncontrado = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Empilhadeira AutoGuiada ");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Entrada");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Saída");

        jButton1.setText("Iniciar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("População:");

        jLabel4.setText("Taxa de crossover:");

        jLabel5.setText("Taxa de mutação:");

        lblPopulacao.setMaximumSize(new java.awt.Dimension(53, 14));
        lblPopulacao.setMinimumSize(new java.awt.Dimension(53, 14));
        lblPopulacao.setName("jlblPopulacao"); // NOI18N
        lblPopulacao.setPreferredSize(new java.awt.Dimension(53, 14));

        lblCrossOver.setName("jlblCrossover"); // NOI18N
        lblCrossOver.setPreferredSize(new java.awt.Dimension(53, 14));

        lblMutacao.setName("jlblMutacao"); // NOI18N
        lblMutacao.setPreferredSize(new java.awt.Dimension(53, 14));

        jLabel6.setText("Melhor fitness:");

        jlblFitness.setName("jlblFitness"); // NOI18N
        jlblFitness.setPreferredSize(new java.awt.Dimension(53, 14));

        jLabel7.setText("Fitness:");

        jlblFitnessEncontrado.setName("jlblFitness"); // NOI18N
        jlblFitnessEncontrado.setPreferredSize(new java.awt.Dimension(53, 14));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Saída");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlblFitnessEncontrado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(612, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel5)
                                .addComponent(jLabel4)
                                .addComponent(jLabel3)
                                .addComponent(jLabel6))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblPopulacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblCrossOver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblMutacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jlblFitness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(157, 157, 157)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(lblPopulacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(lblCrossOver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(lblMutacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6))
                    .addComponent(jlblFitness, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jlblFitnessEncontrado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(36, 36, 36))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initTela(){
        taxaMutacao = 30;
        taxaCrossover = 100;
        taxaPopulacao = 5000;
        numeroGenes   = 200;
        numMaximoTentativas = 50;
        elitismo      = true;
        
        lblCrossOver.setText(String.valueOf(taxaCrossover) + " %");
        lblMutacao.setText(String.valueOf(taxaMutacao) + " %");
        lblPopulacao.setText(String.valueOf(taxaPopulacao));
        jlblFitness.setText("1480");
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        InteligenciaController controller = new InteligenciaController();

        int contador = 0;
        
        controller.setTaxaDeCrossover(taxaCrossover);
        controller.setTaxaDeMutacao(taxaMutacao);
        controller.setSolucao(montaSolucao());
        controller.setNumGenes(numeroGenes);
        controller.setLabirinto(mapa);
        
        Populacao populacao = new Populacao(numeroGenes, taxaPopulacao);
        
        while(contador < numMaximoTentativas){
            //cria nova populacao
            populacao = controller.novaGeracao(populacao, elitismo);
                          
            encontrouSolucao = populacao.temSolucao();
            System.out.println(" Aptidao -> " + populacao.getEmpilhadeira(0).getAptidao());
            
            if (encontrouSolucao){
                melhorSolucao = populacao.getMelhorSolucao();
                if (populacao.getEmpilhadeira(0).getAptidao() < melhorAptidao){
                    direcao = populacao.getEmpilhadeira(0).getDirecao();
                    melhorAptidao = populacao.getEmpilhadeira(0).getAptidao();
                }
                else
                    if (melhorSolucao > 0){
                        direcao = populacao.getEmpilhadeira(melhorSolucao).getDirecao();
                        melhorAptidao = populacao.getEmpilhadeira(melhorSolucao).getAptidao();
                        break;
                    }
            }
                    
            contador++;
        }
        
        if (direcao != null){
            desenhaAptidao();
            jlblFitnessEncontrado.setText(String.valueOf(melhorAptidao));
            
            if (melhorSolucao > 0){
                System.out.println("Encontrei a melhor solucao");
            }
        }
        else
            System.out.println("Nao encontrei a solucao");
    }//GEN-LAST:event_jButton1ActionPerformed

    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }
    
    public void initLabirinto(){
        initNodos();
        
    }
            
    public void initNodos(){
        JPanel labirinto[][] = new JPanel[12][12];
        int coordenadaX = 0, coordenadaY = 0;
        coordenadaY = 60;
        coordenadaX = 50;
        
        for (int y = 0; y < 10; y++) {
            JPanel nodo = new JPanel();
            nodo.setSize(50, 40);
//            nodo.setOpaque(false);
            nodo.setLocation(coordenadaX, coordenadaY);
            nodo.setVisible(true);
            nodo.setLayout(null);
            
            this.add(nodo);
            
            for (int x = 0; x < 10; x++) {
                labirinto[x][y] = nodo;
                
                coordenadaX += 50;
                
                nodo = new JPanel();
                nodo.setSize(50, 40);
                //nodo.setOpaque(false);
                nodo.setBackground(Color.white);
                nodo.setLocation(coordenadaX, coordenadaY);
                nodo.setLayout(null);
                if (!mapa[y][x].equals(" ")){
                    nodo = initParedes(mapa[y][x],nodo,x,y);
                }
                
                nodo.setName("x:" + String.valueOf(x) + "y:" + String.valueOf(y));
                
                this.add(nodo);
            }
            coordenadaY += 40;
            coordenadaX = 50;
        }
    }
    
    public JPanel initParedes(String value,JPanel nodo,int x,int y){
        JPanel parede; 
        int counter = 0;
        String newValue;
        Color corParede = Color.blue;
        boolean lgAdiciona = false;
        
        while(true){
            try{
                newValue = value.substring(counter, counter + 1);
                counter++;
            }
            catch(Exception e){
                break;
            }
            
            parede = new JPanel();
            parede.setVisible(true);
            
            switch(newValue){
                case "N":
                    parede.setBackground(corParede);
                    parede.setSize(50,4);
                    parede.setLocation(0, 0);                    
                    break;
                case "O":
                    parede.setBackground(corParede);
                    parede.setSize(4,40);
                    parede.setLocation(0, 0);
                    break;
                case "L":
                    parede.setBackground(corParede);
                    parede.setSize(4,40);
                    parede.setLocation(46, 0);
                    break;
                case "S":
                    parede.setBackground(corParede);
                    parede.setSize(50,4);
                    parede.setLocation(0, 36);
                    break;
            }
            
            nodo.add(parede);
        }
        
        return nodo;
    }
    //Metodo responsavel por monstar a solucao    
    private ArrayList<Coordenadas> montaSolucao(){
        ArrayList<Coordenadas> solucao = new ArrayList<Coordenadas>();
        solucao.add(new Coordenadas(9,0));
        solucao.add(new Coordenadas(9,4));
        
        return solucao;
    }
    
    private void desenhaAptidao(){
        JPanel nodo;
        
        //Desenha o comeco
        nodo = (JPanel) findComponentByName(this,"x:0y:9");
        if (nodo != null){
            nodo.setBackground(Color.red);
            nodo.repaint();
            nodo.revalidate();
        }
        
        Coordenadas coordenadas = new Coordenadas(0, 9);
        for (int i = 0; i < direcao.size(); i++) {
            
            switch(direcao.get(i)){
                case "Norte":
                    coordenadas.setX(coordenadas.getX());
                    coordenadas.setY(coordenadas.getY() - 1);
                    break;
                case "Sul":
                    coordenadas.setX(coordenadas.getX());
                    coordenadas.setY(coordenadas.getY() + 1);
                    break;                    
                case "Leste":
                    coordenadas.setX(coordenadas.getX() + 1);
                    coordenadas.setY(coordenadas.getY());
                    break;

                case "Oeste":
                    coordenadas.setX(coordenadas.getX() - 1);
                    coordenadas.setY(coordenadas.getY());
                    break;
            }
            
            nodo = (JPanel) findComponentByName(this,
                                                "x:" + String.valueOf(coordenadas.getX()) + 
                                                "y:" + String.valueOf(coordenadas.getY()));
            
            if (nodo != null){
                nodo.setBackground(Color.black);
                nodo.repaint();
                nodo.revalidate();
            }
        }
        
    }
    
    public Component findComponentByName(Container container, String componentName) {

       for (Component component: container.getComponents()) {
           if (componentName.equals(component.getName())) {
               return component;
           }
           else
               if (component instanceof JRootPane) {
                   JRootPane nestedJRootPane = (JRootPane)component;
                   return findComponentByName(nestedJRootPane.getContentPane(), componentName);
                 }
       }
       return null;
    }
     
    public void clearLabirinto(Container container){
        String nome = "";
        for (Component component: container.getComponents()) {
            try{
                nome = component.getName();
                
                if (!nome.equals("null")) {
                    component.setBackground(Color.white);
                }
                else
                    if (component instanceof JRootPane) {
                        JRootPane nestedJRootPane = (JRootPane)component;
                        clearLabirinto(nestedJRootPane.getContentPane());
                    }
            }
            catch(Exception e){
                if (component instanceof JRootPane) {
                    JRootPane nestedJRootPane = (JRootPane)component;
                    clearLabirinto(nestedJRootPane.getContentPane());
                }
            }
            
        }
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jlblFitness;
    private javax.swing.JLabel jlblFitnessEncontrado;
    private javax.swing.JLabel lblCrossOver;
    private javax.swing.JLabel lblMutacao;
    private javax.swing.JLabel lblPopulacao;
    // End of variables declaration//GEN-END:variables
}
